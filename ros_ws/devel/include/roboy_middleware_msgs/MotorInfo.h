// Generated by gencpp from file roboy_middleware_msgs/MotorInfo.msg
// DO NOT EDIT!


#ifndef ROBOY_MIDDLEWARE_MSGS_MESSAGE_MOTORINFO_H
#define ROBOY_MIDDLEWARE_MSGS_MESSAGE_MOTORINFO_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace roboy_middleware_msgs
{
template <class ContainerAllocator>
struct MotorInfo_
{
  typedef MotorInfo_<ContainerAllocator> Type;

  MotorInfo_()
    : global_id()
    , setpoint()
    , control_mode()
    , Kp()
    , Ki()
    , Kd()
    , deadband()
    , IntegralLimit()
    , PWMLimit()
    , pwm()
    , current_limit()
    , communication_quality()
    , error_code()
    , neopixelColor()  {
    }
  MotorInfo_(const ContainerAllocator& _alloc)
    : global_id(_alloc)
    , setpoint(_alloc)
    , control_mode(_alloc)
    , Kp(_alloc)
    , Ki(_alloc)
    , Kd(_alloc)
    , deadband(_alloc)
    , IntegralLimit(_alloc)
    , PWMLimit(_alloc)
    , pwm(_alloc)
    , current_limit(_alloc)
    , communication_quality(_alloc)
    , error_code(_alloc)
    , neopixelColor(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<uint8_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<uint8_t>> _global_id_type;
  _global_id_type global_id;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _setpoint_type;
  _setpoint_type setpoint;

   typedef std::vector<uint8_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<uint8_t>> _control_mode_type;
  _control_mode_type control_mode;

   typedef std::vector<int16_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int16_t>> _Kp_type;
  _Kp_type Kp;

   typedef std::vector<int16_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int16_t>> _Ki_type;
  _Ki_type Ki;

   typedef std::vector<int16_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int16_t>> _Kd_type;
  _Kd_type Kd;

   typedef std::vector<int32_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int32_t>> _deadband_type;
  _deadband_type deadband;

   typedef std::vector<int32_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int32_t>> _IntegralLimit_type;
  _IntegralLimit_type IntegralLimit;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _PWMLimit_type;
  _PWMLimit_type PWMLimit;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _pwm_type;
  _pwm_type pwm;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _current_limit_type;
  _current_limit_type current_limit;

   typedef std::vector<int32_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int32_t>> _communication_quality_type;
  _communication_quality_type communication_quality;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>> _error_code_type;
  _error_code_type error_code;

   typedef std::vector<uint32_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<uint32_t>> _neopixelColor_type;
  _neopixelColor_type neopixelColor;





  typedef boost::shared_ptr< ::roboy_middleware_msgs::MotorInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::roboy_middleware_msgs::MotorInfo_<ContainerAllocator> const> ConstPtr;

}; // struct MotorInfo_

typedef ::roboy_middleware_msgs::MotorInfo_<std::allocator<void> > MotorInfo;

typedef boost::shared_ptr< ::roboy_middleware_msgs::MotorInfo > MotorInfoPtr;
typedef boost::shared_ptr< ::roboy_middleware_msgs::MotorInfo const> MotorInfoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::roboy_middleware_msgs::MotorInfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::roboy_middleware_msgs::MotorInfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::roboy_middleware_msgs::MotorInfo_<ContainerAllocator1> & lhs, const ::roboy_middleware_msgs::MotorInfo_<ContainerAllocator2> & rhs)
{
  return lhs.global_id == rhs.global_id &&
    lhs.setpoint == rhs.setpoint &&
    lhs.control_mode == rhs.control_mode &&
    lhs.Kp == rhs.Kp &&
    lhs.Ki == rhs.Ki &&
    lhs.Kd == rhs.Kd &&
    lhs.deadband == rhs.deadband &&
    lhs.IntegralLimit == rhs.IntegralLimit &&
    lhs.PWMLimit == rhs.PWMLimit &&
    lhs.pwm == rhs.pwm &&
    lhs.current_limit == rhs.current_limit &&
    lhs.communication_quality == rhs.communication_quality &&
    lhs.error_code == rhs.error_code &&
    lhs.neopixelColor == rhs.neopixelColor;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::roboy_middleware_msgs::MotorInfo_<ContainerAllocator1> & lhs, const ::roboy_middleware_msgs::MotorInfo_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace roboy_middleware_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::roboy_middleware_msgs::MotorInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roboy_middleware_msgs::MotorInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::roboy_middleware_msgs::MotorInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::roboy_middleware_msgs::MotorInfo_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roboy_middleware_msgs::MotorInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roboy_middleware_msgs::MotorInfo_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::roboy_middleware_msgs::MotorInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1887edfb7a6740fa9c91d740a81944fd";
  }

  static const char* value(const ::roboy_middleware_msgs::MotorInfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1887edfb7a6740faULL;
  static const uint64_t static_value2 = 0x9c91d740a81944fdULL;
};

template<class ContainerAllocator>
struct DataType< ::roboy_middleware_msgs::MotorInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "roboy_middleware_msgs/MotorInfo";
  }

  static const char* value(const ::roboy_middleware_msgs::MotorInfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::roboy_middleware_msgs::MotorInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8[] global_id\n"
"float32[] setpoint\n"
"uint8[] control_mode\n"
"int16[] Kp\n"
"int16[] Ki\n"
"int16[] Kd\n"
"int32[] deadband\n"
"int32[] IntegralLimit\n"
"float32[] PWMLimit\n"
"float32[] pwm\n"
"float32[] current_limit\n"
"int32[] communication_quality\n"
"string[] error_code\n"
"uint32[] neopixelColor\n"
;
  }

  static const char* value(const ::roboy_middleware_msgs::MotorInfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::roboy_middleware_msgs::MotorInfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.global_id);
      stream.next(m.setpoint);
      stream.next(m.control_mode);
      stream.next(m.Kp);
      stream.next(m.Ki);
      stream.next(m.Kd);
      stream.next(m.deadband);
      stream.next(m.IntegralLimit);
      stream.next(m.PWMLimit);
      stream.next(m.pwm);
      stream.next(m.current_limit);
      stream.next(m.communication_quality);
      stream.next(m.error_code);
      stream.next(m.neopixelColor);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MotorInfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::roboy_middleware_msgs::MotorInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::roboy_middleware_msgs::MotorInfo_<ContainerAllocator>& v)
  {
    s << indent << "global_id[]" << std::endl;
    for (size_t i = 0; i < v.global_id.size(); ++i)
    {
      s << indent << "  global_id[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.global_id[i]);
    }
    s << indent << "setpoint[]" << std::endl;
    for (size_t i = 0; i < v.setpoint.size(); ++i)
    {
      s << indent << "  setpoint[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.setpoint[i]);
    }
    s << indent << "control_mode[]" << std::endl;
    for (size_t i = 0; i < v.control_mode.size(); ++i)
    {
      s << indent << "  control_mode[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.control_mode[i]);
    }
    s << indent << "Kp[]" << std::endl;
    for (size_t i = 0; i < v.Kp.size(); ++i)
    {
      s << indent << "  Kp[" << i << "]: ";
      Printer<int16_t>::stream(s, indent + "  ", v.Kp[i]);
    }
    s << indent << "Ki[]" << std::endl;
    for (size_t i = 0; i < v.Ki.size(); ++i)
    {
      s << indent << "  Ki[" << i << "]: ";
      Printer<int16_t>::stream(s, indent + "  ", v.Ki[i]);
    }
    s << indent << "Kd[]" << std::endl;
    for (size_t i = 0; i < v.Kd.size(); ++i)
    {
      s << indent << "  Kd[" << i << "]: ";
      Printer<int16_t>::stream(s, indent + "  ", v.Kd[i]);
    }
    s << indent << "deadband[]" << std::endl;
    for (size_t i = 0; i < v.deadband.size(); ++i)
    {
      s << indent << "  deadband[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.deadband[i]);
    }
    s << indent << "IntegralLimit[]" << std::endl;
    for (size_t i = 0; i < v.IntegralLimit.size(); ++i)
    {
      s << indent << "  IntegralLimit[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.IntegralLimit[i]);
    }
    s << indent << "PWMLimit[]" << std::endl;
    for (size_t i = 0; i < v.PWMLimit.size(); ++i)
    {
      s << indent << "  PWMLimit[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.PWMLimit[i]);
    }
    s << indent << "pwm[]" << std::endl;
    for (size_t i = 0; i < v.pwm.size(); ++i)
    {
      s << indent << "  pwm[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.pwm[i]);
    }
    s << indent << "current_limit[]" << std::endl;
    for (size_t i = 0; i < v.current_limit.size(); ++i)
    {
      s << indent << "  current_limit[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.current_limit[i]);
    }
    s << indent << "communication_quality[]" << std::endl;
    for (size_t i = 0; i < v.communication_quality.size(); ++i)
    {
      s << indent << "  communication_quality[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.communication_quality[i]);
    }
    s << indent << "error_code[]" << std::endl;
    for (size_t i = 0; i < v.error_code.size(); ++i)
    {
      s << indent << "  error_code[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.error_code[i]);
    }
    s << indent << "neopixelColor[]" << std::endl;
    for (size_t i = 0; i < v.neopixelColor.size(); ++i)
    {
      s << indent << "  neopixelColor[" << i << "]: ";
      Printer<uint32_t>::stream(s, indent + "  ", v.neopixelColor[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOY_MIDDLEWARE_MSGS_MESSAGE_MOTORINFO_H
