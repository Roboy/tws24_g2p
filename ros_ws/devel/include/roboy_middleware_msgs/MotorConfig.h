// Generated by gencpp from file roboy_middleware_msgs/MotorConfig.msg
// DO NOT EDIT!


#ifndef ROBOY_MIDDLEWARE_MSGS_MESSAGE_MOTORCONFIG_H
#define ROBOY_MIDDLEWARE_MSGS_MESSAGE_MOTORCONFIG_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace roboy_middleware_msgs
{
template <class ContainerAllocator>
struct MotorConfig_
{
  typedef MotorConfig_<ContainerAllocator> Type;

  MotorConfig_()
    : update_frequency()
    , global_id()
    , control_mode()
    , PWMLimit()
    , IntegralLimit()
    , Kp()
    , Ki()
    , Kd()
    , deadband()
    , setpoint()  {
    }
  MotorConfig_(const ContainerAllocator& _alloc)
    : update_frequency(_alloc)
    , global_id(_alloc)
    , control_mode(_alloc)
    , PWMLimit(_alloc)
    , IntegralLimit(_alloc)
    , Kp(_alloc)
    , Ki(_alloc)
    , Kd(_alloc)
    , deadband(_alloc)
    , setpoint(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<int32_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int32_t>> _update_frequency_type;
  _update_frequency_type update_frequency;

   typedef std::vector<uint8_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<uint8_t>> _global_id_type;
  _global_id_type global_id;

   typedef std::vector<uint8_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<uint8_t>> _control_mode_type;
  _control_mode_type control_mode;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _PWMLimit_type;
  _PWMLimit_type PWMLimit;

   typedef std::vector<int32_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int32_t>> _IntegralLimit_type;
  _IntegralLimit_type IntegralLimit;

   typedef std::vector<int32_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int32_t>> _Kp_type;
  _Kp_type Kp;

   typedef std::vector<int32_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int32_t>> _Ki_type;
  _Ki_type Ki;

   typedef std::vector<int32_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int32_t>> _Kd_type;
  _Kd_type Kd;

   typedef std::vector<int32_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int32_t>> _deadband_type;
  _deadband_type deadband;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _setpoint_type;
  _setpoint_type setpoint;





  typedef boost::shared_ptr< ::roboy_middleware_msgs::MotorConfig_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::roboy_middleware_msgs::MotorConfig_<ContainerAllocator> const> ConstPtr;

}; // struct MotorConfig_

typedef ::roboy_middleware_msgs::MotorConfig_<std::allocator<void> > MotorConfig;

typedef boost::shared_ptr< ::roboy_middleware_msgs::MotorConfig > MotorConfigPtr;
typedef boost::shared_ptr< ::roboy_middleware_msgs::MotorConfig const> MotorConfigConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::roboy_middleware_msgs::MotorConfig_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::roboy_middleware_msgs::MotorConfig_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::roboy_middleware_msgs::MotorConfig_<ContainerAllocator1> & lhs, const ::roboy_middleware_msgs::MotorConfig_<ContainerAllocator2> & rhs)
{
  return lhs.update_frequency == rhs.update_frequency &&
    lhs.global_id == rhs.global_id &&
    lhs.control_mode == rhs.control_mode &&
    lhs.PWMLimit == rhs.PWMLimit &&
    lhs.IntegralLimit == rhs.IntegralLimit &&
    lhs.Kp == rhs.Kp &&
    lhs.Ki == rhs.Ki &&
    lhs.Kd == rhs.Kd &&
    lhs.deadband == rhs.deadband &&
    lhs.setpoint == rhs.setpoint;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::roboy_middleware_msgs::MotorConfig_<ContainerAllocator1> & lhs, const ::roboy_middleware_msgs::MotorConfig_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace roboy_middleware_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::roboy_middleware_msgs::MotorConfig_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roboy_middleware_msgs::MotorConfig_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::roboy_middleware_msgs::MotorConfig_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::roboy_middleware_msgs::MotorConfig_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roboy_middleware_msgs::MotorConfig_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roboy_middleware_msgs::MotorConfig_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::roboy_middleware_msgs::MotorConfig_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7747d06877cbad5be373b8fc0574ddaa";
  }

  static const char* value(const ::roboy_middleware_msgs::MotorConfig_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7747d06877cbad5bULL;
  static const uint64_t static_value2 = 0xe373b8fc0574ddaaULL;
};

template<class ContainerAllocator>
struct DataType< ::roboy_middleware_msgs::MotorConfig_<ContainerAllocator> >
{
  static const char* value()
  {
    return "roboy_middleware_msgs/MotorConfig";
  }

  static const char* value(const ::roboy_middleware_msgs::MotorConfig_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::roboy_middleware_msgs::MotorConfig_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32[] update_frequency\n"
"uint8[] global_id\n"
"uint8[] control_mode\n"
"float32[] PWMLimit\n"
"int32[] IntegralLimit\n"
"int32[] Kp\n"
"int32[] Ki\n"
"int32[] Kd\n"
"int32[] deadband\n"
"float32[] setpoint\n"
;
  }

  static const char* value(const ::roboy_middleware_msgs::MotorConfig_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::roboy_middleware_msgs::MotorConfig_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.update_frequency);
      stream.next(m.global_id);
      stream.next(m.control_mode);
      stream.next(m.PWMLimit);
      stream.next(m.IntegralLimit);
      stream.next(m.Kp);
      stream.next(m.Ki);
      stream.next(m.Kd);
      stream.next(m.deadband);
      stream.next(m.setpoint);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MotorConfig_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::roboy_middleware_msgs::MotorConfig_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::roboy_middleware_msgs::MotorConfig_<ContainerAllocator>& v)
  {
    s << indent << "update_frequency[]" << std::endl;
    for (size_t i = 0; i < v.update_frequency.size(); ++i)
    {
      s << indent << "  update_frequency[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.update_frequency[i]);
    }
    s << indent << "global_id[]" << std::endl;
    for (size_t i = 0; i < v.global_id.size(); ++i)
    {
      s << indent << "  global_id[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.global_id[i]);
    }
    s << indent << "control_mode[]" << std::endl;
    for (size_t i = 0; i < v.control_mode.size(); ++i)
    {
      s << indent << "  control_mode[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.control_mode[i]);
    }
    s << indent << "PWMLimit[]" << std::endl;
    for (size_t i = 0; i < v.PWMLimit.size(); ++i)
    {
      s << indent << "  PWMLimit[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.PWMLimit[i]);
    }
    s << indent << "IntegralLimit[]" << std::endl;
    for (size_t i = 0; i < v.IntegralLimit.size(); ++i)
    {
      s << indent << "  IntegralLimit[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.IntegralLimit[i]);
    }
    s << indent << "Kp[]" << std::endl;
    for (size_t i = 0; i < v.Kp.size(); ++i)
    {
      s << indent << "  Kp[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.Kp[i]);
    }
    s << indent << "Ki[]" << std::endl;
    for (size_t i = 0; i < v.Ki.size(); ++i)
    {
      s << indent << "  Ki[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.Ki[i]);
    }
    s << indent << "Kd[]" << std::endl;
    for (size_t i = 0; i < v.Kd.size(); ++i)
    {
      s << indent << "  Kd[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.Kd[i]);
    }
    s << indent << "deadband[]" << std::endl;
    for (size_t i = 0; i < v.deadband.size(); ++i)
    {
      s << indent << "  deadband[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.deadband[i]);
    }
    s << indent << "setpoint[]" << std::endl;
    for (size_t i = 0; i < v.setpoint.size(); ++i)
    {
      s << indent << "  setpoint[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.setpoint[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOY_MIDDLEWARE_MSGS_MESSAGE_MOTORCONFIG_H
