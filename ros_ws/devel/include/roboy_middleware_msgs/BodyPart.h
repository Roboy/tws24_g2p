// Generated by gencpp from file roboy_middleware_msgs/BodyPart.msg
// DO NOT EDIT!


#ifndef ROBOY_MIDDLEWARE_MSGS_MESSAGE_BODYPART_H
#define ROBOY_MIDDLEWARE_MSGS_MESSAGE_BODYPART_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace roboy_middleware_msgs
{
template <class ContainerAllocator>
struct BodyPart_
{
  typedef BodyPart_<ContainerAllocator> Type;

  BodyPart_()
    : name()
    , status(0)  {
    }
  BodyPart_(const ContainerAllocator& _alloc)
    : name(_alloc)
    , status(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _name_type;
  _name_type name;

   typedef uint8_t _status_type;
  _status_type status;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(ENABLED)
  #undef ENABLED
#endif
#if defined(_WIN32) && defined(DISABLED)
  #undef DISABLED
#endif
#if defined(_WIN32) && defined(ERROR_CONDITION_A)
  #undef ERROR_CONDITION_A
#endif
#if defined(_WIN32) && defined(ERROR_CONDITION_B)
  #undef ERROR_CONDITION_B
#endif

  enum {
    ENABLED = 0u,
    DISABLED = 1u,
    ERROR_CONDITION_A = 2u,
    ERROR_CONDITION_B = 3u,
  };


  typedef boost::shared_ptr< ::roboy_middleware_msgs::BodyPart_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::roboy_middleware_msgs::BodyPart_<ContainerAllocator> const> ConstPtr;

}; // struct BodyPart_

typedef ::roboy_middleware_msgs::BodyPart_<std::allocator<void> > BodyPart;

typedef boost::shared_ptr< ::roboy_middleware_msgs::BodyPart > BodyPartPtr;
typedef boost::shared_ptr< ::roboy_middleware_msgs::BodyPart const> BodyPartConstPtr;

// constants requiring out of line definition

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::roboy_middleware_msgs::BodyPart_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::roboy_middleware_msgs::BodyPart_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::roboy_middleware_msgs::BodyPart_<ContainerAllocator1> & lhs, const ::roboy_middleware_msgs::BodyPart_<ContainerAllocator2> & rhs)
{
  return lhs.name == rhs.name &&
    lhs.status == rhs.status;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::roboy_middleware_msgs::BodyPart_<ContainerAllocator1> & lhs, const ::roboy_middleware_msgs::BodyPart_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace roboy_middleware_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::roboy_middleware_msgs::BodyPart_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roboy_middleware_msgs::BodyPart_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::roboy_middleware_msgs::BodyPart_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::roboy_middleware_msgs::BodyPart_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roboy_middleware_msgs::BodyPart_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roboy_middleware_msgs::BodyPart_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::roboy_middleware_msgs::BodyPart_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7244bd0a66f4dc551fcf27198addf4f4";
  }

  static const char* value(const ::roboy_middleware_msgs::BodyPart_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7244bd0a66f4dc55ULL;
  static const uint64_t static_value2 = 0x1fcf27198addf4f4ULL;
};

template<class ContainerAllocator>
struct DataType< ::roboy_middleware_msgs::BodyPart_<ContainerAllocator> >
{
  static const char* value()
  {
    return "roboy_middleware_msgs/BodyPart";
  }

  static const char* value(const ::roboy_middleware_msgs::BodyPart_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::roboy_middleware_msgs::BodyPart_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Sample values\n"
"uint8 ENABLED=0\n"
"uint8 DISABLED=1\n"
"uint8 ERROR_CONDITION_A=2\n"
"uint8 ERROR_CONDITION_B=3\n"
"\n"
"# Body part designator\n"
"string name\n"
"\n"
"# Status byte implemented like Unix return codes:\n"
"# 0: All OK / Ready\n"
"# 1: Function disabled\n"
"# 2-100: Custom error codes indicating different stop conditions or\n"
"# malfunctions.\n"
"# 100-255: Custom readiness states. Some functionality still online / waiting\n"
"# for something.\n"
"#\n"
"uint8 status\n"
;
  }

  static const char* value(const ::roboy_middleware_msgs::BodyPart_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::roboy_middleware_msgs::BodyPart_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.name);
      stream.next(m.status);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct BodyPart_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::roboy_middleware_msgs::BodyPart_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::roboy_middleware_msgs::BodyPart_<ContainerAllocator>& v)
  {
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.name);
    s << indent << "status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.status);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOY_MIDDLEWARE_MSGS_MESSAGE_BODYPART_H
