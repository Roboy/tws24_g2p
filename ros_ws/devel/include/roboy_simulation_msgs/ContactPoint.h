// Generated by gencpp from file roboy_simulation_msgs/ContactPoint.msg
// DO NOT EDIT!


#ifndef ROBOY_SIMULATION_MSGS_MESSAGE_CONTACTPOINT_H
#define ROBOY_SIMULATION_MSGS_MESSAGE_CONTACTPOINT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>

namespace roboy_simulation_msgs
{
template <class ContainerAllocator>
struct ContactPoint_
{
  typedef ContactPoint_<ContainerAllocator> Type;

  ContactPoint_()
    : linkid(0)
    , position()
    , contactnormal()
    , contactdistance(0.0)
    , normalforce(0.0)  {
    }
  ContactPoint_(const ContainerAllocator& _alloc)
    : linkid(0)
    , position(_alloc)
    , contactnormal(_alloc)
    , contactdistance(0.0)
    , normalforce(0.0)  {
  (void)_alloc;
    }



   typedef int64_t _linkid_type;
  _linkid_type linkid;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _position_type;
  _position_type position;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _contactnormal_type;
  _contactnormal_type contactnormal;

   typedef double _contactdistance_type;
  _contactdistance_type contactdistance;

   typedef double _normalforce_type;
  _normalforce_type normalforce;





  typedef boost::shared_ptr< ::roboy_simulation_msgs::ContactPoint_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::roboy_simulation_msgs::ContactPoint_<ContainerAllocator> const> ConstPtr;

}; // struct ContactPoint_

typedef ::roboy_simulation_msgs::ContactPoint_<std::allocator<void> > ContactPoint;

typedef boost::shared_ptr< ::roboy_simulation_msgs::ContactPoint > ContactPointPtr;
typedef boost::shared_ptr< ::roboy_simulation_msgs::ContactPoint const> ContactPointConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::roboy_simulation_msgs::ContactPoint_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::roboy_simulation_msgs::ContactPoint_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::roboy_simulation_msgs::ContactPoint_<ContainerAllocator1> & lhs, const ::roboy_simulation_msgs::ContactPoint_<ContainerAllocator2> & rhs)
{
  return lhs.linkid == rhs.linkid &&
    lhs.position == rhs.position &&
    lhs.contactnormal == rhs.contactnormal &&
    lhs.contactdistance == rhs.contactdistance &&
    lhs.normalforce == rhs.normalforce;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::roboy_simulation_msgs::ContactPoint_<ContainerAllocator1> & lhs, const ::roboy_simulation_msgs::ContactPoint_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace roboy_simulation_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::roboy_simulation_msgs::ContactPoint_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roboy_simulation_msgs::ContactPoint_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::roboy_simulation_msgs::ContactPoint_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::roboy_simulation_msgs::ContactPoint_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roboy_simulation_msgs::ContactPoint_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roboy_simulation_msgs::ContactPoint_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::roboy_simulation_msgs::ContactPoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "32832356e1139e4e5fd083337d208b0e";
  }

  static const char* value(const ::roboy_simulation_msgs::ContactPoint_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x32832356e1139e4eULL;
  static const uint64_t static_value2 = 0x5fd083337d208b0eULL;
};

template<class ContainerAllocator>
struct DataType< ::roboy_simulation_msgs::ContactPoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "roboy_simulation_msgs/ContactPoint";
  }

  static const char* value(const ::roboy_simulation_msgs::ContactPoint_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::roboy_simulation_msgs::ContactPoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#id of roboy link in which a collision happened\n"
"int64 linkid\n"
"#position of contact point on roboy in link frame\n"
"geometry_msgs/Vector3 position\n"
"#contact normal on external body, pointing towards roboy\n"
"geometry_msgs/Vector3 contactnormal\n"
"#contact distance, positive for separation, negative for penetration\n"
"float64 contactdistance\n"
"#normal force applied during the last 'stepSimulation'\n"
"float64 normalforce\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::roboy_simulation_msgs::ContactPoint_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::roboy_simulation_msgs::ContactPoint_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.linkid);
      stream.next(m.position);
      stream.next(m.contactnormal);
      stream.next(m.contactdistance);
      stream.next(m.normalforce);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ContactPoint_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::roboy_simulation_msgs::ContactPoint_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::roboy_simulation_msgs::ContactPoint_<ContainerAllocator>& v)
  {
    s << indent << "linkid: ";
    Printer<int64_t>::stream(s, indent + "  ", v.linkid);
    s << indent << "position: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.position);
    s << indent << "contactnormal: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.contactnormal);
    s << indent << "contactdistance: ";
    Printer<double>::stream(s, indent + "  ", v.contactdistance);
    s << indent << "normalforce: ";
    Printer<double>::stream(s, indent + "  ", v.normalforce);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOY_SIMULATION_MSGS_MESSAGE_CONTACTPOINT_H
