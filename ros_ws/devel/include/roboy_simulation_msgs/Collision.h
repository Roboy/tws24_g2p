// Generated by gencpp from file roboy_simulation_msgs/Collision.msg
// DO NOT EDIT!


#ifndef ROBOY_SIMULATION_MSGS_MESSAGE_COLLISION_H
#define ROBOY_SIMULATION_MSGS_MESSAGE_COLLISION_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <roboy_simulation_msgs/ContactPoint.h>

namespace roboy_simulation_msgs
{
template <class ContainerAllocator>
struct Collision_
{
  typedef Collision_<ContainerAllocator> Type;

  Collision_()
    : header()
    , contact_points()  {
    }
  Collision_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , contact_points(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector< ::roboy_simulation_msgs::ContactPoint_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::roboy_simulation_msgs::ContactPoint_<ContainerAllocator> >> _contact_points_type;
  _contact_points_type contact_points;





  typedef boost::shared_ptr< ::roboy_simulation_msgs::Collision_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::roboy_simulation_msgs::Collision_<ContainerAllocator> const> ConstPtr;

}; // struct Collision_

typedef ::roboy_simulation_msgs::Collision_<std::allocator<void> > Collision;

typedef boost::shared_ptr< ::roboy_simulation_msgs::Collision > CollisionPtr;
typedef boost::shared_ptr< ::roboy_simulation_msgs::Collision const> CollisionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::roboy_simulation_msgs::Collision_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::roboy_simulation_msgs::Collision_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::roboy_simulation_msgs::Collision_<ContainerAllocator1> & lhs, const ::roboy_simulation_msgs::Collision_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.contact_points == rhs.contact_points;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::roboy_simulation_msgs::Collision_<ContainerAllocator1> & lhs, const ::roboy_simulation_msgs::Collision_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace roboy_simulation_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::roboy_simulation_msgs::Collision_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roboy_simulation_msgs::Collision_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::roboy_simulation_msgs::Collision_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::roboy_simulation_msgs::Collision_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roboy_simulation_msgs::Collision_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roboy_simulation_msgs::Collision_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::roboy_simulation_msgs::Collision_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2a6f8784cdbd2284b14765b033c69396";
  }

  static const char* value(const ::roboy_simulation_msgs::Collision_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2a6f8784cdbd2284ULL;
  static const uint64_t static_value2 = 0xb14765b033c69396ULL;
};

template<class ContainerAllocator>
struct DataType< ::roboy_simulation_msgs::Collision_<ContainerAllocator> >
{
  static const char* value()
  {
    return "roboy_simulation_msgs/Collision";
  }

  static const char* value(const ::roboy_simulation_msgs::Collision_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::roboy_simulation_msgs::Collision_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"# contact points of the body with any other object\n"
"ContactPoint[] contact_points\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: roboy_simulation_msgs/ContactPoint\n"
"#id of roboy link in which a collision happened\n"
"int64 linkid\n"
"#position of contact point on roboy in link frame\n"
"geometry_msgs/Vector3 position\n"
"#contact normal on external body, pointing towards roboy\n"
"geometry_msgs/Vector3 contactnormal\n"
"#contact distance, positive for separation, negative for penetration\n"
"float64 contactdistance\n"
"#normal force applied during the last 'stepSimulation'\n"
"float64 normalforce\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::roboy_simulation_msgs::Collision_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::roboy_simulation_msgs::Collision_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.contact_points);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Collision_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::roboy_simulation_msgs::Collision_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::roboy_simulation_msgs::Collision_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "contact_points[]" << std::endl;
    for (size_t i = 0; i < v.contact_points.size(); ++i)
    {
      s << indent << "  contact_points[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::roboy_simulation_msgs::ContactPoint_<ContainerAllocator> >::stream(s, indent + "    ", v.contact_points[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOY_SIMULATION_MSGS_MESSAGE_COLLISION_H
