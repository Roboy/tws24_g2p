// Generated by gencpp from file bench_pkg/SetPWMRequest.msg
// DO NOT EDIT!


#ifndef BENCH_PKG_MESSAGE_SETPWMREQUEST_H
#define BENCH_PKG_MESSAGE_SETPWMREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace bench_pkg
{
template <class ContainerAllocator>
struct SetPWMRequest_
{
  typedef SetPWMRequest_<ContainerAllocator> Type;

  SetPWMRequest_()
    : flex_myobrick_pwm(0.0)
    , extend_myobrick_pwm(0.0)  {
    }
  SetPWMRequest_(const ContainerAllocator& _alloc)
    : flex_myobrick_pwm(0.0)
    , extend_myobrick_pwm(0.0)  {
  (void)_alloc;
    }



   typedef float _flex_myobrick_pwm_type;
  _flex_myobrick_pwm_type flex_myobrick_pwm;

   typedef float _extend_myobrick_pwm_type;
  _extend_myobrick_pwm_type extend_myobrick_pwm;





  typedef boost::shared_ptr< ::bench_pkg::SetPWMRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::bench_pkg::SetPWMRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SetPWMRequest_

typedef ::bench_pkg::SetPWMRequest_<std::allocator<void> > SetPWMRequest;

typedef boost::shared_ptr< ::bench_pkg::SetPWMRequest > SetPWMRequestPtr;
typedef boost::shared_ptr< ::bench_pkg::SetPWMRequest const> SetPWMRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::bench_pkg::SetPWMRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::bench_pkg::SetPWMRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::bench_pkg::SetPWMRequest_<ContainerAllocator1> & lhs, const ::bench_pkg::SetPWMRequest_<ContainerAllocator2> & rhs)
{
  return lhs.flex_myobrick_pwm == rhs.flex_myobrick_pwm &&
    lhs.extend_myobrick_pwm == rhs.extend_myobrick_pwm;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::bench_pkg::SetPWMRequest_<ContainerAllocator1> & lhs, const ::bench_pkg::SetPWMRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace bench_pkg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::bench_pkg::SetPWMRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::bench_pkg::SetPWMRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::bench_pkg::SetPWMRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::bench_pkg::SetPWMRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::bench_pkg::SetPWMRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::bench_pkg::SetPWMRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::bench_pkg::SetPWMRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cb48fd0db65a57d5e7159a9d22fca96c";
  }

  static const char* value(const ::bench_pkg::SetPWMRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xcb48fd0db65a57d5ULL;
  static const uint64_t static_value2 = 0xe7159a9d22fca96cULL;
};

template<class ContainerAllocator>
struct DataType< ::bench_pkg::SetPWMRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bench_pkg/SetPWMRequest";
  }

  static const char* value(const ::bench_pkg::SetPWMRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::bench_pkg::SetPWMRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 flex_myobrick_pwm\n"
"float32 extend_myobrick_pwm\n"
;
  }

  static const char* value(const ::bench_pkg::SetPWMRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::bench_pkg::SetPWMRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.flex_myobrick_pwm);
      stream.next(m.extend_myobrick_pwm);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SetPWMRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::bench_pkg::SetPWMRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::bench_pkg::SetPWMRequest_<ContainerAllocator>& v)
  {
    s << indent << "flex_myobrick_pwm: ";
    Printer<float>::stream(s, indent + "  ", v.flex_myobrick_pwm);
    s << indent << "extend_myobrick_pwm: ";
    Printer<float>::stream(s, indent + "  ", v.extend_myobrick_pwm);
  }
};

} // namespace message_operations
} // namespace ros

#endif // BENCH_PKG_MESSAGE_SETPWMREQUEST_H
