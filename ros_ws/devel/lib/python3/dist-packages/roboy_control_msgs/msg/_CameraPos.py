# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from roboy_control_msgs/CameraPos.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class CameraPos(genpy.Message):
  _md5sum = "8903cef6b8f5901e6c1b1feeb6a5a6d1"
  _type = "roboy_control_msgs/CameraPos"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float32 m00
float32 m01
float32 m02
float32 m03

float32 m10
float32 m11
float32 m12
float32 m13

float32 m20
float32 m21
float32 m22
float32 m23

float32 m30
float32 m31
float32 m32
float32 m33
"""
  __slots__ = ['m00','m01','m02','m03','m10','m11','m12','m13','m20','m21','m22','m23','m30','m31','m32','m33']
  _slot_types = ['float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       m00,m01,m02,m03,m10,m11,m12,m13,m20,m21,m22,m23,m30,m31,m32,m33

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(CameraPos, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.m00 is None:
        self.m00 = 0.
      if self.m01 is None:
        self.m01 = 0.
      if self.m02 is None:
        self.m02 = 0.
      if self.m03 is None:
        self.m03 = 0.
      if self.m10 is None:
        self.m10 = 0.
      if self.m11 is None:
        self.m11 = 0.
      if self.m12 is None:
        self.m12 = 0.
      if self.m13 is None:
        self.m13 = 0.
      if self.m20 is None:
        self.m20 = 0.
      if self.m21 is None:
        self.m21 = 0.
      if self.m22 is None:
        self.m22 = 0.
      if self.m23 is None:
        self.m23 = 0.
      if self.m30 is None:
        self.m30 = 0.
      if self.m31 is None:
        self.m31 = 0.
      if self.m32 is None:
        self.m32 = 0.
      if self.m33 is None:
        self.m33 = 0.
    else:
      self.m00 = 0.
      self.m01 = 0.
      self.m02 = 0.
      self.m03 = 0.
      self.m10 = 0.
      self.m11 = 0.
      self.m12 = 0.
      self.m13 = 0.
      self.m20 = 0.
      self.m21 = 0.
      self.m22 = 0.
      self.m23 = 0.
      self.m30 = 0.
      self.m31 = 0.
      self.m32 = 0.
      self.m33 = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_16f().pack(_x.m00, _x.m01, _x.m02, _x.m03, _x.m10, _x.m11, _x.m12, _x.m13, _x.m20, _x.m21, _x.m22, _x.m23, _x.m30, _x.m31, _x.m32, _x.m33))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 64
      (_x.m00, _x.m01, _x.m02, _x.m03, _x.m10, _x.m11, _x.m12, _x.m13, _x.m20, _x.m21, _x.m22, _x.m23, _x.m30, _x.m31, _x.m32, _x.m33,) = _get_struct_16f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_16f().pack(_x.m00, _x.m01, _x.m02, _x.m03, _x.m10, _x.m11, _x.m12, _x.m13, _x.m20, _x.m21, _x.m22, _x.m23, _x.m30, _x.m31, _x.m32, _x.m33))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 64
      (_x.m00, _x.m01, _x.m02, _x.m03, _x.m10, _x.m11, _x.m12, _x.m13, _x.m20, _x.m21, _x.m22, _x.m23, _x.m30, _x.m31, _x.m32, _x.m33,) = _get_struct_16f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_16f = None
def _get_struct_16f():
    global _struct_16f
    if _struct_16f is None:
        _struct_16f = struct.Struct("<16f")
    return _struct_16f
