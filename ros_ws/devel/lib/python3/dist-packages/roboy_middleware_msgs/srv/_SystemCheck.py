# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from roboy_middleware_msgs/SystemCheckRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class SystemCheckRequest(genpy.Message):
  _md5sum = "281adc23b4965daf53d0457be3437b1f"
  _type = "roboy_middleware_msgs/SystemCheckRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# if empty check all motors, otherwise only the requested
uint8[] motorIDs
"""
  __slots__ = ['motorIDs']
  _slot_types = ['uint8[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       motorIDs

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SystemCheckRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.motorIDs is None:
        self.motorIDs = b''
    else:
      self.motorIDs = b''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.motorIDs
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.motorIDs = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.motorIDs
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.motorIDs = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from roboy_middleware_msgs/SystemCheckResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class SystemCheckResponse(genpy.Message):
  _md5sum = "8b46525f687a0d9002d0c14cf5e5c645"
  _type = "roboy_middleware_msgs/SystemCheckResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# returns which mototrs are functional
uint8[] motorIDs
bool[] encoder0_pos
bool[] encoder1_pos
bool[] communication_quality

"""
  __slots__ = ['motorIDs','encoder0_pos','encoder1_pos','communication_quality']
  _slot_types = ['uint8[]','bool[]','bool[]','bool[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       motorIDs,encoder0_pos,encoder1_pos,communication_quality

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SystemCheckResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.motorIDs is None:
        self.motorIDs = b''
      if self.encoder0_pos is None:
        self.encoder0_pos = []
      if self.encoder1_pos is None:
        self.encoder1_pos = []
      if self.communication_quality is None:
        self.communication_quality = []
    else:
      self.motorIDs = b''
      self.encoder0_pos = []
      self.encoder1_pos = []
      self.communication_quality = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.motorIDs
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.encoder0_pos)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(struct.Struct(pattern).pack(*self.encoder0_pos))
      length = len(self.encoder1_pos)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(struct.Struct(pattern).pack(*self.encoder1_pos))
      length = len(self.communication_quality)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(struct.Struct(pattern).pack(*self.communication_quality))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.motorIDs = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.encoder0_pos = s.unpack(str[start:end])
      self.encoder0_pos = list(map(bool, self.encoder0_pos))
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.encoder1_pos = s.unpack(str[start:end])
      self.encoder1_pos = list(map(bool, self.encoder1_pos))
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.communication_quality = s.unpack(str[start:end])
      self.communication_quality = list(map(bool, self.communication_quality))
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.motorIDs
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.encoder0_pos)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(self.encoder0_pos.tostring())
      length = len(self.encoder1_pos)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(self.encoder1_pos.tostring())
      length = len(self.communication_quality)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(self.communication_quality.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.motorIDs = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.encoder0_pos = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=length)
      self.encoder0_pos = list(map(bool, self.encoder0_pos))
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.encoder1_pos = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=length)
      self.encoder1_pos = list(map(bool, self.encoder1_pos))
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.communication_quality = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=length)
      self.communication_quality = list(map(bool, self.communication_quality))
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
class SystemCheck(object):
  _type          = 'roboy_middleware_msgs/SystemCheck'
  _md5sum = 'bb69ef4baabf6b217933952435e6cb64'
  _request_class  = SystemCheckRequest
  _response_class = SystemCheckResponse
